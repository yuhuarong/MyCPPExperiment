#include "BigInteger.h"
#include <iostream>
#include <ctime>

using namespace std;

int main() {
    int m = 500;
//    BigInteger i0("765");
//    i0 = -i0;
//    i0.print();

//    //测试大数加法
//    BigInteger integer0 = BigInteger::addMod(
//            "99999999999999999999171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
//            "171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037",
//            m).trim();
//    integer0.print();

//    //测试大数减法
//    BigInteger integer1 = BigInteger::subMod(
//            "99999978213681623487199999999999999171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
//            "171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037",
//            m).trim();
//    integer1.print();

//    //测试大数乘法
//    BigInteger integer2 = BigInteger::multiMod(

//            "72348769236498263958623896598236958623985692836598236459862345892365983629865982365982365982638952390465290836590237590375092375970562308560892365826354892365892698356238658236528036508235692356092365023645026350863459623905629038520365283658236598236582365826385238956238568236502365082356235862356208365280346508236y50823650234658026508260853602356702365082465024365028346502843658234650283648036508236523475892352034572803456024357230950234957234095",
//            m).trim();
//    integer2.print();

//    //测试大数除法
//    BigInteger integer3 = BigInteger::divideMod(

//            "7234876923649826395862389659823695862398569283659823645986234589236598362986598236598236598263895239046529083659023759037509237597056230856089236582635489236589269835623865823652803650823569235609236502364502635086345962390562903852036528365823659823658236582638523895623856823650236508235623586235620836528034650823650823650234658026508260853602356702365082465024365028346502843658234650283648036508236523475892352034572803456024357230950234957234095",
//            m).trim();
//    integer3.print();

    //测试大数乘幂
    time_t before=time(nullptr);
    cout << "before " << before <<endl;

    BigInteger integer4 = BigInteger::powMod(
            "1538471584751254817251241234123213412312",
            "1230397634765374673407612321312312312313",
            m).trim();
    integer4.print();

    time_t after=time(nullptr);
    cout << "after " << after <<endl;

    return 0;
}