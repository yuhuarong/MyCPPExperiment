#include "BigInteger.h"
#include <iostream>
#include <minwindef.h>
#include <sysinfoapi.h>
#include <fstream>

using namespace std;

int main() {
    int m = 600;
    DWORD start, end;

    //region debug
//    //测试大数加法
//    start = GetTickCount();
//    BigInteger integer0 = BigInteger::addMod(
//            "99999999999999999999171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
//            "171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037",
//            m).trim();
//    end = GetTickCount();
//    integer0.print();
//    cout << end << "-" << start << " = " << end - start << " ms" << endl;
//
//    //测试大数减法
//    start = GetTickCount();
//    BigInteger integer1 = BigInteger::subMod(
//            "99999978213681623487199999999999999171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
//            "171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037",
//            m).trim();
//    end = GetTickCount();
//    integer1.print();
//    cout << end << "-" << start << " = " << end - start << " ms" << endl;
//
//    //测试大数乘法
//    start = GetTickCount();
//    BigInteger integer2 = BigInteger::multiMod(
//            "1265428354827354872354872538745283754872354872538745287354872354872538475238745823754872385962349856298365492385682385205620365023650263056230759237509409572309758023475023745037420937549023752958172361628312368916391628936121928639123128463912739172093710927301921826398162938619286356718293761783172637819279812126542835482735487235487253874528375487235487253874528735487235487253847523874582375487238596234985629836549238568238520562036502365026305623075923750940957230975802347502374503742093754902375295817236162831236891639162893612192863912312846391273917209371092730192182639816293861928635671829376178317263781927981212654283548273548723548725387452837548723548725387452873548723548725384752387458237548723859623498562983654923856823852056203650236502630562307592375094095723097580234750237450374209375490237529581723616283123689163916289361219286391231284639127391720937109273019218263981629386192863567182937617831726378192798121265428354827354872354872538745283754872354872538745287354872354872538475238745823754872385962349856298365492385682385205620365023650263056230759237509409572309758023475023745037420937549023752958172361628312368916391628936121928639123128463912739172093710927301921826398162938619286356718293761783172637819279812126542835482735487235487253874528375487235487253874528735487235487253847523874582375487238596234985629836549238568238520562036502365026305623075923750940957230975802347502374503742093754902375295817236162831236891639162893612192863912312846391273917209371092730192182639816293861928635671829376178317263781927981212654283548273548723548725387452837548723548725387452873548723548725384752387458237548723859623498562983654923856823852056203650236502630562307592375094095723097580234750237450374209375490237529581723616283123689163916289361219286391231284639127391720937109273019218263981629386192863567182937617831726378192798121265428354827354872354872538745283754872354872538745287354872354872538475238745823754872385962349856298365492385682385205620365023650263056230759237509409572309758023475023745037420937549023752958172361628312368916391628936121928639123128463912739172093710927301921826398162938619286356718293761783172637819279812",
//            "7234876923649826395862389659823695862398569283659823645986234589236598362986598236598236598263895239046529083659023759037509237597056230856089236582635489236589269835623865823652803650823569235609236502364502635086345962390562903852036528365823659823658236582638523895623856823650236508235623586235620836528034650823650823650234658026508260853602356702365082465024365028346502843658234650283648036508236523475892352034572803456024357230950234957234095",
//            m).trim();
//    end = GetTickCount();
//    integer2.print();
//    cout << end << "-" << start << " = " << end - start << " ms" << endl;
//
//    //测试大数除法
//    start = GetTickCount();
//    BigInteger integer3 = BigInteger::divideMod(

//            "7234876923649826395862389659823695862398569283659823645986234589236598362986598236598236598263895239046529083659023759037509237597056230856089236582635489236589269835623865823652803650823569235609236502364502635086345962390562903852036528365823659823658236582638523895623856823650236508235623586235620836528034650823650823650234658026508260853602356702365082465024365028346502843658234650283648036508236523475892352034572803456024357230950234957234095",
//            m).trim();
//    end = GetTickCount();
//    integer3.print();
//    cout << end << "-" << start << " = " << end - start << " ms" << endl;
//
//    //测试大数乘幂
//    start = GetTickCount();
//        BigInteger integer4 = BigInteger::powMod(
//            "264896182964982164981289648912698461982649162846234782154781528745178241278541828498128489126491286419286491286489",
//            "2165487125412545182745152478168246324623481264912648891649128468186296489874689124981624981246",
//            m).trim();
//    end = GetTickCount();
//    integer4.print();
//    cout << end << "-" << start << " = " << end - start << " ms" << endl;
    //endregion

    //region release
    string i0;
    string i1;
    BigInteger* result = nullptr;
    char opt;
    cout << "数据结构课程设计-大数加减乘除幂" << endl;


    cout << "是否从文件读取? Y/N" << endl;
    char opt0;
    cin >> opt0;
    if (opt0 == 'y' || opt0 == 'Y') {
        cout << "请输入文件名" << endl;
        string filename;
        cin >> filename;
        fstream f(filename, ios::in);
        if (f) {
            char o;
            f >> i0 >> o >> i1 >> m;
            switch (o) {
                case '+':
                    opt = '1';
                    start = GetTickCount();
                    result = &BigInteger::addMod(i0, i1, m).trim();
                    end = GetTickCount();
                    cout << "结果" << endl;
                    result->print();
                    cout << "完成，耗时 " << end - start << " ms" << endl;
                    break;
                case '-':
                    opt = '2';
                    start = GetTickCount();
                    result = &BigInteger::subMod(i0, i1, m).trim();
                    end = GetTickCount();
                    cout << "结果" << endl;
                    result->print();
                    cout << "完成，耗时 " << end - start << " ms" << endl;
                    break;
                case '*':
                    opt = '3';
                    start = GetTickCount();
                    result = &BigInteger::multiMod(i0, i1, m).trim();
                    end = GetTickCount();
                    cout << "结果" << endl;
                    result->print();
                    cout << "完成，耗时 " << end - start << " ms" << endl;
                    break;
                case '/':
                    opt = '4';
                    start = GetTickCount();
                    result = &BigInteger::divideMod(i0, i1, m).trim();
                    end = GetTickCount();
                    cout << "结果" << endl;
                    result->print();
                    cout << "完成，耗时 " << end - start << " ms" << endl;
                    break;
                case '^':
                    opt = '5';
                    start = GetTickCount();
                    result = &BigInteger::powMod(i0, i1, m).trim();
                    end = GetTickCount();
                    cout << "结果" << endl;
                    result->print();
                    cout << "完成，耗时 " << end - start << " ms" << endl;
                    break;
                default:
                    return 0;
            }

        } else {
            cout << "文件打开失败" << endl;
            return 0;
        }
    } else {
        cout << "------------目 录-------------" << endl;
        cout << "1 大数加法" << endl;
        cout << "2 大数减法" << endl;
        cout << "3 大数乘法" << endl;
        cout << "4 大数除法" << endl;
        cout << "5 大数乘幂" << endl;
        cout << "请输入数字（输入 ‘0’ 退出） " << endl;
        cin >> opt;

        switch (opt) {
            case '1':
            {
                cout << "请输入n = 10 ^ m 的 m : " << endl;
                cin >> m;
                cout << "请输入第一个数字" << endl;
                cin >> i0;
                cout << "请输入第二个数字" << endl;
                cin >> i1;
                start = GetTickCount();
                result = &BigInteger::addMod(i0, i1, m).trim();
                end = GetTickCount();
                cout << "结果" << endl;
                result->print();
                cout << "完成，耗时 " << end - start << " ms" << endl;
                break;
            }
            case '2':
            {
                cout << "请输入n = 10 ^ m 的 m : " << endl;
                cin >> m;
                cout << "请输入第一个数字" << endl;
                cin >> i0;
                cout << "请输入第二个数字" << endl;
                cin >> i1;
                start = GetTickCount();
                result = &BigInteger::subMod(i0, i1, m).trim();
                end = GetTickCount();
                cout << "结果" << endl;
                result->print();
                cout << "完成，耗时 " << end - start << " ms" << endl;
                break;
            }
            case '3':
            {
                cout << "请输入n = 10 ^ m 的 m : " << endl;
                cin >> m;
                cout << "请输入第一个数字" << endl;
                cin >> i0;
                cout << "请输入第二个数字" << endl;
                cin >> i1;
                start = GetTickCount();
                result = &BigInteger::multiMod(i0, i1, m).trim();
                end = GetTickCount();
                cout << "结果" << endl;
                result->print();
                cout << "完成，耗时 " << end - start << " ms" << endl;
                break;
            }
            case '4':
            {
                cout << "请输入n = 10 ^ m 的 m : " << endl;
                cin >> m;
                cout << "请输入第一个数字" << endl;
                cin >> i0;
                cout << "请输入第二个数字" << endl;
                cin >> i1;
                start = GetTickCount();
                result = &BigInteger::divideMod(i0, i1, m).trim();
                end = GetTickCount();
                cout << "结果" << endl;
                result->print();
                cout << "完成，耗时 " << end - start << " ms" << endl;
                break;
            }
            case '5':
            {
                cout << "请输入n = 10 ^ m 的 m : " << endl;
                cin >> m;
                cout << "请输入第一个数字" << endl;
                cin >> i0;
                cout << "请输入第二个数字" << endl;
                cin >> i1;
                start = GetTickCount();
                result = &BigInteger::powMod(i0, i1, m).trim();
                end = GetTickCount();
                cout << "结果" << endl;
                result->print();
                cout << "完成，耗时 " << end - start << " ms" << endl;
                break;
            }
            default:
                return 0;
        }
    }



    cout << "是否保存到文件 Y/N ?" << endl;
    char opt1;
    cin >> opt1;
    if (opt1 == 'y' || opt1 == 'Y') {
        cout << "请输入文件名" << endl;
        string filename;
        cin >> filename;
        fstream f(filename, ios::out);
        if (f) {
            f << i0 << endl;
            switch (opt) {
                case '1':
                    f << "+";
                    break;
                case '2':
                    f << "-";
                    break;
                case '3':
                    f << "*";
                    break;
                case '4':
                    f << "/";
                    break;
                case '5':
                    f << "^";
                    break;
                default:
                    f << "?";
            }
            f << endl;
            f << i1 << endl;
            f << m << endl;
            f << "= " << *result << endl;
            cout << "文件保存成功" << endl;
            f.close();
        } else {
            cout << "文件保存失败" << endl;
        }
    }
    //endregion

    return 0;
}