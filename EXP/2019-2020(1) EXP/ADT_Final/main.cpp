#include "BigInteger.h"
#include <iostream>
#include <minwindef.h>
#include <sysinfoapi.h>

using namespace std;

int main() {
    int m = 500;
    DWORD start, end;

    //region 测试
    //测试大数加法
    start = GetTickCount();
    BigInteger integer0 = BigInteger::addMod(
            "99999999999999999999171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037",
            m).trim();
    end = GetTickCount();
    integer0.print();
    cout << end << "-" << start << " = " << end - start << " ms" << endl;

    //测试大数减法
    start = GetTickCount();
    BigInteger integer1 = BigInteger::subMod(
            "99999978213681623487199999999999999171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572171258418949126498162498162461982649128649812649816948612986491826498126498126489162489612094601926401924019273901273912930712904731092374901237409123740917234907120947109274901274017240912740917204971029470129741902740912740927492375489375903756907205239572352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037352903578092375092370542309745902375905203952903752903752397529043750289475037597256648024689346582349652345234856230856034956037",
            m).trim();
    end = GetTickCount();
    integer1.print();
    cout << end << "-" << start << " = " << end - start << " ms" << endl;

    //测试大数乘法
    start = GetTickCount();
    BigInteger integer2 = BigInteger::multiMod(

            "7234876923649826395862389659823695862398569283659823645986234589236598362986598236598236598263895239046529083659023759037509237597056230856089236582635489236589269835623865823652803650823569235609236502364502635086345962390562903852036528365823659823658236582638523895623856823650236508235623586235620836528034650823650823650234658026508260853602356702365082465024365028346502843658234650283648036508236523475892352034572803456024357230950234957234095",
            m).trim();
    end = GetTickCount();
    integer2.print();
    cout << end << "-" << start << " = " << end - start << " ms" << endl;

    //测试大数除法
    start = GetTickCount();
    BigInteger integer3 = BigInteger::divideMod(

            "7234876923649826395862389659823695862398569283659823645986234589236598362986598236598236598263895239046529083659023759037509237597056230856089236582635489236589269835623865823652803650823569235609236502364502635086345962390562903852036528365823659823658236582638523895623856823650236508235623586235620836528034650823650823650234658026508260853602356702365082465024365028346502843658234650283648036508236523475892352034572803456024357230950234957234095",
            m).trim();
    end = GetTickCount();
    integer3.print();
    cout << end << "-" << start << " = " << end - start << " ms" << endl;

    //测试大数乘幂
    start = GetTickCount();
        BigInteger integer4 = BigInteger::powMod(
            "2345872354827756426030234148068962268842479765712269860063492247133091447947857088206461814035749101469241925603797491940443660519984310034607224743031401628918847584902636846516890311962582762480291146443144452675912929302518344435879628069058886463147123723825489442313597825349040687748013359191249385035524625377838921175981785534359734922283460639612435299878553941802830480370832199825886909512738382608317522475900191032138935264942695669549240532162133088695730703497392447477811827419995169471402396876823458723548277564260302341480689622688424797657122698600634922471330914479478570882064618140357491014692419256037974919404436605199843100346072247430314016289188475849026368465168903119625827624802911464431444526759129293025183444358796280690588864631471237238254894423135978253490406877480133591912493850355246253778389211759817855343597349222834606396124352998785539418028304803708321998258869095127383826083175224759001910321389352649426956695492405321621330886957307034973924474778118274199951694714023968768234587235482775642603023414806896226884247976571226986006349224713309144794785708820646181403574910146924192560379749194044366051998431003460722474303140162891884758490263684651689031196258276248029114644314445267591292930251834443587962806905888646314712372382548944231359782534904068774801335919124938503552462537783892117598178553435973492228346063961243529987855394180283048037083219982588690951273838260831752247590019103213893526494269566954924053216213308869573070349739244747781182741999516947140239687682345872354827756426030234148068962268842479765712269860063492247133091447947857088206461814035749101469241925603797491940443660519984310034607224743031401628918847584902636846516890311962582762480291146443144452675912929302518344435879628069058886463147123723825489442313597825349040687748013359191249385035524625377838921175981785534359734922283460639612435299878553941802830480370832199825886909512738382608317522475900191032138935264942695669549240532162133088695730703497392447477811827419995169471402396876823458723548277564260302341480689622688424797657122698600634922471330914479478570882064618140357491014692419256037974919404436605199843100346072247430314016289188475849026368465168903119625827624802911464431444526759129293025183444358796280690588864631471237238254894423135978253490406877480133591912493850355246253778389211759817855343597349222834606396124352998785539418028304803708321998258869095127383826083175224759001910321389352649426956695492405321621330886957307034973924474778118274199951694714023968768234587235482775642603023414806896226884247976571226986006349224713309144794785708820646181403574910146924192560379749194044366051998431003460722474303140162891884758490263684651689031196258276248029114644314445267591292930251834443587962806905888646314712372382548944231359782534904068774801335919124938503552462537783892117598178553435973492228346063961243529987855394180283048037083219982588690951273838260831752247590019103213893526494269566954924053216213308869573070349739244747781182741999516947140239687682345872354827756426030234148068962268842479765712269860063492247133091447947857088206461814035749101469241925603797491940443660519984310034607224743031401628918847584902636846516890311962582762480291146443144452675912929302518344435879628069058886463147123723825489442313597825349040687748013359191249385035524625377838921175981785534359734922283460639612435299878553941802830480370832199825886909512738382608317522475900191032138935264942695669549240532162133088695730703497392447477811827419995169471402396876877",

            m).trim();
    end = GetTickCount();
    integer4.print();
    cout << end << "-" << start << " = " << end - start << " ms" << endl;
    //endregion

    return 0;
}